<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ActionCaption" xml:space="preserve">
    <value>行动</value>
  </data>
  <data name="ActionTooltip" xml:space="preserve">
    <value>选择算法动作</value>
  </data>
  <data name="CipherRotor0Caption" xml:space="preserve">
    <value>密码转子 0</value>
  </data>
  <data name="CipherRotor1Caption" xml:space="preserve">
    <value>密码转子1</value>
  </data>
  <data name="CipherRotor2Caption" xml:space="preserve">
    <value>密码转子2</value>
  </data>
  <data name="CipherRotor3Caption" xml:space="preserve">
    <value>密码转子3</value>
  </data>
  <data name="CipherRotor4Caption" xml:space="preserve">
    <value>密码转子 4</value>
  </data>
  <data name="CipherRotorGroup" xml:space="preserve">
    <value>密码转子选择</value>
  </data>
  <data name="CipherRotorPositionsCaption" xml:space="preserve">
    <value>密码转子位置</value>
  </data>
  <data name="CipherRotorPositionsTooltip" xml:space="preserve">
    <value>设置密码转子的初始位置</value>
  </data>
  <data name="CipherRotorTooltip" xml:space="preserve">
    <value>这个密码转子的选择</value>
  </data>
  <data name="ControlRotor0Caption" xml:space="preserve">
    <value>控制转子 0</value>
  </data>
  <data name="ControlRotor1Caption" xml:space="preserve">
    <value>控制转子 1</value>
  </data>
  <data name="ControlRotor2Caption" xml:space="preserve">
    <value>控制转子2</value>
  </data>
  <data name="ControlRotor3Caption" xml:space="preserve">
    <value>控制转子 3</value>
  </data>
  <data name="ControlRotor4Caption" xml:space="preserve">
    <value>控制转子 4</value>
  </data>
  <data name="ControlRotorGroup" xml:space="preserve">
    <value>控制转子选择</value>
  </data>
  <data name="ControlRotorPositionsCaption" xml:space="preserve">
    <value>控制转子位置</value>
  </data>
  <data name="ControlRotorPositionsTooltip" xml:space="preserve">
    <value>设置控制转子的初始位置</value>
  </data>
  <data name="ControlRotorTooltip" xml:space="preserve">
    <value>该控制转子的选择</value>
  </data>
  <data name="Decrypt" xml:space="preserve">
    <value>解密</value>
  </data>
  <data name="Encrypt" xml:space="preserve">
    <value>加密</value>
  </data>
  <data name="IndexRotor0Caption" xml:space="preserve">
    <value>索引转子 0</value>
  </data>
  <data name="IndexRotor1Caption" xml:space="preserve">
    <value>分度转子 1</value>
  </data>
  <data name="IndexRotor2Caption" xml:space="preserve">
    <value>分度转子 2</value>
  </data>
  <data name="IndexRotor3Caption" xml:space="preserve">
    <value>分度转子 3</value>
  </data>
  <data name="IndexRotor4Caption" xml:space="preserve">
    <value>分度转子 4</value>
  </data>
  <data name="IndexRotorGroup" xml:space="preserve">
    <value>索引转子选择</value>
  </data>
  <data name="IndexRotorPositionsCaption" xml:space="preserve">
    <value>索引转子位置</value>
  </data>
  <data name="IndexRotorPositionsTooltip" xml:space="preserve">
    <value>设置索引转子的初始位置</value>
  </data>
  <data name="IndexRotorTooltip" xml:space="preserve">
    <value>本指标转子的选择</value>
  </data>
  <data name="InputCaption" xml:space="preserve">
    <value>输入</value>
  </data>
  <data name="InputTooltip" xml:space="preserve">
    <value>输入用于加密的明文或用于解密的密文</value>
  </data>
  <data name="KeyCaption" xml:space="preserve">
    <value>钥匙</value>
  </data>
  <data name="KeyTooltip" xml:space="preserve">
    <value>加密或解密期间使用的加密密钥</value>
  </data>
  <data name="ModelCaption" xml:space="preserve">
    <value>模型</value>
  </data>
  <data name="ModelTooltip" xml:space="preserve">
    <value>设置使用的 SECTION 模型</value>
  </data>
  <data name="OutputCaption" xml:space="preserve">
    <value>输出</value>
  </data>
  <data name="OutputTooltip" xml:space="preserve">
    <value>密文或明文的输出</value>
  </data>
  <data name="PluginCaption" xml:space="preserve">
    <value>西格巴</value>
  </data>
  <data name="PluginTooltip" xml:space="preserve">
    <value>SIGABA是美国转子加密机</value>
  </data>
  <data name="PositionsGroup" xml:space="preserve">
    <value>转子启动位置</value>
  </data>
  <data name="ReversedCaption" xml:space="preserve">
    <value>反转</value>
  </data>
  <data name="ReversedTooltip" xml:space="preserve">
    <value>如果选择此项，则该转子在机器中反向使用</value>
  </data>
  <data name="UnknownSymbolHandlingCaption" xml:space="preserve">
    <value>未知符号处理</value>
  </data>
  <data name="UnknownSymbolHandlingList1" xml:space="preserve">
    <value>忽略（保持不变）</value>
  </data>
  <data name="UnknownSymbolHandlingList2" xml:space="preserve">
    <value>去掉</value>
  </data>
  <data name="UnknownSymbolHandlingList3" xml:space="preserve">
    <value>用。。。来代替 &amp;#39;？&amp;#39;</value>
  </data>
  <data name="UnknownSymbolHandlingTooltip" xml:space="preserve">
    <value>对于输入中遇到的不在字母表中的字符，应该怎么做？</value>
  </data>
  <data name="UseZAsSpaceCaption" xml:space="preserve">
    <value>使用“Z”作为空格</value>
  </data>
  <data name="UseZAsSpaceTooltip" xml:space="preserve">
    <value>如果启用，则在加密过程中空格将替换为“Z”，而在解密过程中将替换为“Z”</value>
  </data>
</root>