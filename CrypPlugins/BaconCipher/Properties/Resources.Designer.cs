//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CrypTool.BaconCipher.Properties {
    using System;
    
    
    /// <summary>
    ///   Eine stark typisierte Ressourcenklasse zum Suchen von lokalisierten Zeichenfolgen usw.
    /// </summary>
    // Diese Klasse wurde von der StronglyTypedResourceBuilder automatisch generiert
    // -Klasse über ein Tool wie ResGen oder Visual Studio automatisch generiert.
    // Um einen Member hinzuzufügen oder zu entfernen, bearbeiten Sie die .ResX-Datei und führen dann ResGen
    // mit der /str-Option erneut aus, oder Sie erstellen Ihr VS-Projekt neu.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Gibt die zwischengespeicherte ResourceManager-Instanz zurück, die von dieser Klasse verwendet wird.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("CrypTool.BaconCipher.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Überschreibt die CurrentUICulture-Eigenschaft des aktuellen Threads für alle
        ///   Ressourcenzuordnungen, die diese stark typisierte Ressourcenklasse verwenden.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Alphabet ähnelt.
        /// </summary>
        internal static string Alphabet {
            get {
                return ResourceManager.GetString("Alphabet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The given alphabet is too long. Please activate dynamic length or provide a alphabet with less than 32 chars. ähnelt.
        /// </summary>
        internal static string AlphabetTooLong {
            get {
                return ResourceManager.GetString("AlphabetTooLong", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Alphabet used by the Bacon cipher. ähnelt.
        /// </summary>
        internal static string AlphabetTooltip {
            get {
                return ResourceManager.GetString("AlphabetTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Baconian cipher ähnelt.
        /// </summary>
        internal static string BaconCipher {
            get {
                return ResourceManager.GetString("BaconCipher", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die A steganography method by Francis Bacon. ähnelt.
        /// </summary>
        internal static string BaconTooltip {
            get {
                return ResourceManager.GetString("BaconTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The alphabet contains duplicate chars. ähnelt.
        /// </summary>
        internal static string CharAlreadyMapped {
            get {
                return ResourceManager.GetString("CharAlreadyMapped", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Could not decode character &quot;{0}&quot;. ähnelt.
        /// </summary>
        internal static string CharCouldNotBeDecoded {
            get {
                return ResourceManager.GetString("CharCouldNotBeDecoded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Length ähnelt.
        /// </summary>
        internal static string CodeLength {
            get {
                return ResourceManager.GetString("CodeLength", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Code word length ähnelt.
        /// </summary>
        internal static string CodeLengthCaption {
            get {
                return ResourceManager.GetString("CodeLengthCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Determines the static length of the codeword. ähnelt.
        /// </summary>
        internal static string CodeLengthToolTip {
            get {
                return ResourceManager.GetString("CodeLengthToolTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Could not fully decode since &apos;{tempCode}&apos; is not part of the mapping. ähnelt.
        /// </summary>
        internal static string CodeNotMappable {
            get {
                return ResourceManager.GetString("CodeNotMappable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die abcdefghijklmnopqrstuvwxyz ähnelt.
        /// </summary>
        internal static string DefaultAlphabet {
            get {
                return ResourceManager.GetString("DefaultAlphabet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Dynamic code word length ähnelt.
        /// </summary>
        internal static string DynamicCodeLengthCaption {
            get {
                return ResourceManager.GetString("DynamicCodeLengthCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die If dynamic code word length is enabled, only as many bits are used for encoding as are necessary for the size of the alphabet. Otherwise, a fixed size of 5 bits is used for encoding. ähnelt.
        /// </summary>
        internal static string DynamicCodeLengthToolTip {
            get {
                return ResourceManager.GetString("DynamicCodeLengthToolTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Could not parse ciphertext alphabet input. Please use a seperator such as: &quot;{0}&quot;. Stopping Execution! ähnelt.
        /// </summary>
        internal static string ErrorSplitCipherAlphabet {
            get {
                return ResourceManager.GetString("ErrorSplitCipherAlphabet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die ABCDEFGHIJKLM ähnelt.
        /// </summary>
        internal static string FirstSet {
            get {
                return ResourceManager.GetString("FirstSet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Ignoring char &quot;{0}&quot; since it is not part of the alphabet. ähnelt.
        /// </summary>
        internal static string IgnoringChar {
            get {
                return ResourceManager.GetString("IgnoringChar", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die External alphabet ähnelt.
        /// </summary>
        internal static string InputAlphabetCaption {
            get {
                return ResourceManager.GetString("InputAlphabetCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die External input for the alphabet used by the Bacon cipher. ähnelt.
        /// </summary>
        internal static string InputAlphabetTooltip {
            get {
                return ResourceManager.GetString("InputAlphabetTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Key ähnelt.
        /// </summary>
        internal static string InputCipherCharsCaption {
            get {
                return ResourceManager.GetString("InputCipherCharsCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The key used for en- and decryption ähnelt.
        /// </summary>
        internal static string InputCipherCharsTooltip {
            get {
                return ResourceManager.GetString("InputCipherCharsTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Text input ähnelt.
        /// </summary>
        internal static string InputTextCaption {
            get {
                return ResourceManager.GetString("InputTextCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Input a string to be processed by the Bacon cipher ähnelt.
        /// </summary>
        internal static string InputTextTooltip {
            get {
                return ResourceManager.GetString("InputTextTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Algorithm mode ähnelt.
        /// </summary>
        internal static string Mode {
            get {
                return ResourceManager.GetString("Mode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Decrypt ähnelt.
        /// </summary>
        internal static string ModeDecrypt {
            get {
                return ResourceManager.GetString("ModeDecrypt", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Encrypt ähnelt.
        /// </summary>
        internal static string ModeEncrypt {
            get {
                return ResourceManager.GetString("ModeEncrypt", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Determine whether the component is in encrypt or decrypt mode. ähnelt.
        /// </summary>
        internal static string ModeTooltip {
            get {
                return ResourceManager.GetString("ModeTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Binary ähnelt.
        /// </summary>
        internal static string OutputModeBinary {
            get {
                return ResourceManager.GetString("OutputModeBinary", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Output mode ähnelt.
        /// </summary>
        internal static string OutputModeCaption {
            get {
                return ResourceManager.GetString("OutputModeCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die External ciphertext alphabet ähnelt.
        /// </summary>
        internal static string OutputModeExternalInput {
            get {
                return ResourceManager.GetString("OutputModeExternalInput", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Random chars ähnelt.
        /// </summary>
        internal static string OutputModeRandomChar {
            get {
                return ResourceManager.GetString("OutputModeRandomChar", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Specifies how the generated code should be output. ähnelt.
        /// </summary>
        internal static string OutputModeToolTip {
            get {
                return ResourceManager.GetString("OutputModeToolTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Text output ähnelt.
        /// </summary>
        internal static string OutputTextCaption {
            get {
                return ResourceManager.GetString("OutputTextCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Text after being processed by the Bacon cipher. ähnelt.
        /// </summary>
        internal static string OutputTextTooltip {
            get {
                return ResourceManager.GetString("OutputTextTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die NOPQRSTUVWXYZ ähnelt.
        /// </summary>
        internal static string SecondSet {
            get {
                return ResourceManager.GetString("SecondSet", resourceCulture);
            }
        }
    }
}
